CREATE DATABASE IF NOT EXISTS youtube2;

USE  youtube2; 

CREATE TABLE Users (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Username VARCHAR(50) NOT NULL,
    BirthDate DATE,
    Gender ENUM('Male', 'Female', 'Other'),
    Country VARCHAR(50),
    PostalCode VARCHAR(10),
    INDEX (Email),
    INDEX (Username)
);

CREATE TABLE Channels (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL UNIQUE,
    Description TEXT,
    CreationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UserID INT NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    INDEX (UserID)
);

CREATE TABLE Videos (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(150) NOT NULL,
    Description TEXT,
    Size INT UNSIGNED,
    FileName VARCHAR(255),
    Duration INT UNSIGNED,
    Thumbnail VARCHAR(255),
    ViewCount INT UNSIGNED DEFAULT 0,
    LikeCount INT UNSIGNED DEFAULT 0,
    DislikeCount INT UNSIGNED DEFAULT 0,
    Status ENUM('Public', 'Hidden', 'Private') NOT NULL,
    UserID INT NOT NULL,
    PublicationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    INDEX (UserID),
    INDEX (Title)
);

CREATE TABLE Tags (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE Videos_Tags (
    VideoID INT,
    TagID INT,
    PRIMARY KEY (VideoID, TagID),
    FOREIGN KEY (VideoID) REFERENCES Videos(ID) ON DELETE CASCADE,
    FOREIGN KEY (TagID) REFERENCES Tags(ID)
);

CREATE TABLE Subscriptions (
    UserID INT,
    ChannelID INT,
    SubscriptionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (UserID, ChannelID),
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID) ON DELETE CASCADE
);

CREATE TABLE Likes_Dislikes_Videos (
    UserID INT,
    VideoID INT,
    Type ENUM('Like', 'Dislike') NOT NULL,
    DateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (UserID, VideoID),
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (VideoID) REFERENCES Videos(ID) ON DELETE CASCADE
);

CREATE TABLE Playlists (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    CreationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Status ENUM('Public', 'Private') NOT NULL,
    UserID INT NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    INDEX (UserID)
);

CREATE TABLE Playlists_Videos (
    PlaylistID INT,
    VideoID INT,
    PRIMARY KEY (PlaylistID, VideoID),
    FOREIGN KEY (PlaylistID) REFERENCES Playlists(ID) ON DELETE CASCADE,
    FOREIGN KEY (VideoID) REFERENCES Videos(ID) ON DELETE CASCADE
);

CREATE TABLE Comments (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    Text TEXT NOT NULL,
    DateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UserID INT NOT NULL,
    VideoID INT NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (VideoID) REFERENCES Videos(ID) ON DELETE CASCADE,
    INDEX (VideoID),
    INDEX (UserID)
);

CREATE TABLE Likes_Dislikes_Comments (
    UserID INT,
    CommentID INT,
    Type ENUM('Like', 'Dislike') NOT NULL,
    DateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (UserID, CommentID),
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (CommentID) REFERENCES Comments(ID) ON DELETE CASCADE
);